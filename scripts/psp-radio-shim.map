{"version":3,"sources":["../../node_modules/psp-radio-api/node_modules/entities/lib/decode_codepoint.js","../../node_modules/psp-radio-api/node_modules/entities/lib/decode.js","../../node_modules/psp-radio-api/node_modules/entities/lib/encode.js","../../node_modules/psp-radio-api/node_modules/entities/lib/index.js","../src/index.js","scripts/psp-radio-shim.js"],"names":["PromiseAdapter","constructor","callback","state","_promise","_error","then","_done","bind","_rejected","response","ok","status","text","result","PSP","baseUrl","_requestBaseURL","_masterPlayer","Audio","_subPlayer","document","addEventListener","body","appendChild","_maybeUpdateMetadata","_streamMetadataUpdatedAt","Date","now","src","slice","type","playlistBase64","split","playlistLines","atob","trim","filter","line","length","targetUrl","file1Line","find","test","join","metaUrl","URL","originalPathname","pathname","fetch","toString","mode","xml","window","DOMParser","parseFromString","_streamMetadata","Array","from","querySelectorAll","element","querySelector","innerHTML","sysRadioPlayStream","url","userAgentName","headers","Headers","append","btoa","play","played","console","log","sysRadioGetContentMetaInfo","error","Promise","reject","catch","sysRadioPlayPls","userAgentName0","userAgentName1","sysRadioPlayM3u","sysRadioStop","pause","sysRadioSetMasterVolume","vol","sysRadioSetSubVolume","sysRadioGetLeftAudioPeakLevel","sysRadioGetRightAudioPeakLevel","sysRadioGetLeftAudioAverageLevel","sysRadioGetRightAudioAverageLevel","sysRadioSetSineWaveOscillatorFrequencyAndVolume","freq","tension","cwtext","keyingspeed","sysRadioSetWhiteNoiseOscillatorVolume","lowF","highF","sysRadioSetAudioShiftWidth","val","sysRadioSetAudioCutOffWidth","sysRadioSetAudioPitchShiftWidth","sysRadioPlayEffectSound","sysRadioPrepareForHttpGet","charCodeConvertOption","_httpRequest","sysRadioGetHttpGetStatus","sysRadioGetHttpGetResult","sysRadioHttpGetTerminate","sysRadioGetPlayerStatus","paused","readyState","sysRadioGetNetworkBandQuality","sysRadioGetAudioSoundDistortionRate","titleElement","sysRadioGetBitRate","bitrateElement","parseInt","sysRadioGetSamplingRate","samplerateElement","sysRadioGetStreamUrl","sysRadioGetStreamTitle","serverTitleElement","sysRadioGetRelatedPageUrl","serverUrlElement","sysRadioGetStreamIpAddress","sysRadioGetStreamPort","sysRadioGetStreamBufferLevel","sysRadioPrepareForScanDir","path","sysRadioScanDir","sysRadioGetMediaInOutStatus","sysRadioPrepareForStrOperation","str","_strOperationString","sysRadioStrLength","sysRadioStrIndexOf","pattern","startPos","indexOf","sysRadioStrSlice","endPos","sysRadioStrCharCodeAt","pos","charCodeAt","sysRadioStrOperationTerminate","sysRadioCharacterEntityConvert","require","decodeHTML","sysRadioCharacterCodeConvert","sysRadioGetAnalogStickXValue","sysRadioGetAnalogStickYValue","sysRadioGetAnalogStickAngleValue","sysRadioGetAnalogStickRadiusValue","sysRadioSetDebugMode","flag","sysRadioDebugLog","debug","sysRadioSetDebugLogTextStyle","colorF0r","colorF0g","colorF0b","colorF0a","colorF1r","colorF1g","colorF1b","colorF1a","colorBr","colorBg","colorBb","colorBa","slyle","align","sysRadioClearDebugLog","sysRadioGetPlayerCoreVersionInfo","sysRadioCapabilityCheck","id","canPlayType","sysRadioGetStartButtonToggleStatus","sysRadioBackLightAlwaysOn","sysRadioBusyIndicator","sysRadioCaptureScreenShot","sysRadioSleep","sysRadioGetSystemStatus","navigator","mimeTypes","enabledPlugin","forEach","setAttribute","psp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3BA;;;;;;;AASO,MAAMA,cAAN,CAAqB;AAK1BC,EAAAA,WAAW,CAACC,QAAD,EAA+B;AACxC,SAAKC,KAAL,GAAa,SAAb;;AAEA,QAAI;AACF,WAAKC,QAAL,GAAgBF,QAAQ,EAAxB;AADF,KAAA,C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","file":"psp-radio-shim.map","sourceRoot":"../src","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar decode_json_1 = __importDefault(require(\"./maps/decode.json\"));\n// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119\nfunction decodeCodePoint(codePoint) {\n    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\n        return \"\\uFFFD\";\n    }\n    if (codePoint in decode_json_1.default) {\n        // @ts-ignore\n        codePoint = decode_json_1.default[codePoint];\n    }\n    var output = \"\";\n    if (codePoint > 0xffff) {\n        codePoint -= 0x10000;\n        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\n        codePoint = 0xdc00 | (codePoint & 0x3ff);\n    }\n    output += String.fromCharCode(codePoint);\n    return output;\n}\nexports.default = decodeCodePoint;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar entities_json_1 = __importDefault(require(\"./maps/entities.json\"));\nvar legacy_json_1 = __importDefault(require(\"./maps/legacy.json\"));\nvar xml_json_1 = __importDefault(require(\"./maps/xml.json\"));\nvar decode_codepoint_1 = __importDefault(require(\"./decode_codepoint\"));\nexports.decodeXML = getStrictDecoder(xml_json_1.default);\nexports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);\nfunction getStrictDecoder(map) {\n    var keys = Object.keys(map).join(\"|\");\n    var replace = getReplacer(map);\n    keys += \"|#[xX][\\\\da-fA-F]+|#\\\\d+\";\n    var re = new RegExp(\"&(?:\" + keys + \");\", \"g\");\n    return function (str) { return String(str).replace(re, replace); };\n}\nvar sorter = function (a, b) { return (a < b ? 1 : -1); };\nexports.decodeHTML = (function () {\n    var legacy = Object.keys(legacy_json_1.default).sort(sorter);\n    var keys = Object.keys(entities_json_1.default).sort(sorter);\n    for (var i = 0, j = 0; i < keys.length; i++) {\n        if (legacy[j] === keys[i]) {\n            keys[i] += \";?\";\n            j++;\n        }\n        else {\n            keys[i] += \";\";\n        }\n    }\n    var re = new RegExp(\"&(?:\" + keys.join(\"|\") + \"|#[xX][\\\\da-fA-F]+;?|#\\\\d+;?)\", \"g\");\n    var replace = getReplacer(entities_json_1.default);\n    function replacer(str) {\n        if (str.substr(-1) !== \";\")\n            str += \";\";\n        return replace(str);\n    }\n    //TODO consider creating a merged map\n    return function (str) {\n        return String(str).replace(re, replacer);\n    };\n})();\nfunction getReplacer(map) {\n    return function replace(str) {\n        if (str.charAt(1) === \"#\") {\n            if (str.charAt(2) === \"X\" || str.charAt(2) === \"x\") {\n                return decode_codepoint_1.default(parseInt(str.substr(3), 16));\n            }\n            return decode_codepoint_1.default(parseInt(str.substr(2), 10));\n        }\n        return map[str.slice(1, -1)];\n    };\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar xml_json_1 = __importDefault(require(\"./maps/xml.json\"));\nvar inverseXML = getInverseObj(xml_json_1.default);\nvar xmlReplacer = getInverseReplacer(inverseXML);\nexports.encodeXML = getInverse(inverseXML, xmlReplacer);\nvar entities_json_1 = __importDefault(require(\"./maps/entities.json\"));\nvar inverseHTML = getInverseObj(entities_json_1.default);\nvar htmlReplacer = getInverseReplacer(inverseHTML);\nexports.encodeHTML = getInverse(inverseHTML, htmlReplacer);\nfunction getInverseObj(obj) {\n    return Object.keys(obj)\n        .sort()\n        .reduce(function (inverse, name) {\n        inverse[obj[name]] = \"&\" + name + \";\";\n        return inverse;\n    }, {});\n}\nfunction getInverseReplacer(inverse) {\n    var single = [];\n    var multiple = [];\n    Object.keys(inverse).forEach(function (k) {\n        return k.length === 1\n            ? // Add value to single array\n                single.push(\"\\\\\" + k)\n            : // Add value to multiple array\n                multiple.push(k);\n    });\n    //TODO add ranges\n    multiple.unshift(\"[\" + single.join(\"\") + \"]\");\n    return new RegExp(multiple.join(\"|\"), \"g\");\n}\nvar reNonASCII = /[^\\0-\\x7F]/g;\nvar reAstralSymbols = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\nfunction singleCharReplacer(c) {\n    return \"&#x\" + c\n        .charCodeAt(0)\n        .toString(16)\n        .toUpperCase() + \";\";\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any\nfunction astralReplacer(c, _) {\n    // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n    var high = c.charCodeAt(0);\n    var low = c.charCodeAt(1);\n    var codePoint = (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;\n    return \"&#x\" + codePoint.toString(16).toUpperCase() + \";\";\n}\nfunction getInverse(inverse, re) {\n    return function (data) {\n        return data\n            .replace(re, function (name) { return inverse[name]; })\n            .replace(reAstralSymbols, astralReplacer)\n            .replace(reNonASCII, singleCharReplacer);\n    };\n}\nvar reXmlChars = getInverseReplacer(inverseXML);\nfunction escape(data) {\n    return data\n        .replace(reXmlChars, singleCharReplacer)\n        .replace(reAstralSymbols, astralReplacer)\n        .replace(reNonASCII, singleCharReplacer);\n}\nexports.escape = escape;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar decode_1 = require(\"./decode\");\nvar encode_1 = require(\"./encode\");\nfunction decode(data, level) {\n    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);\n}\nexports.decode = decode;\nfunction decodeStrict(data, level) {\n    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);\n}\nexports.decodeStrict = decodeStrict;\nfunction encode(data, level) {\n    return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);\n}\nexports.encode = encode;\nvar encode_2 = require(\"./encode\");\nexports.encodeXML = encode_2.encodeXML;\nexports.encodeHTML = encode_2.encodeHTML;\nexports.escape = encode_2.escape;\n// Legacy aliases\nexports.encodeHTML4 = encode_2.encodeHTML;\nexports.encodeHTML5 = encode_2.encodeHTML;\nvar decode_2 = require(\"./decode\");\nexports.decodeXML = decode_2.decodeXML;\nexports.decodeHTML = decode_2.decodeHTML;\nexports.decodeHTMLStrict = decode_2.decodeHTMLStrict;\n// Legacy aliases\nexports.decodeHTML4 = decode_2.decodeHTML;\nexports.decodeHTML5 = decode_2.decodeHTML;\nexports.decodeHTML4Strict = decode_2.decodeHTMLStrict;\nexports.decodeHTML5Strict = decode_2.decodeHTMLStrict;\nexports.decodeXMLStrict = decode_2.decodeXML;\n","// @flow\n\ndeclare var Audio;\n\ntype PSPBoolean = 0 | 1;\n\n/**\n * Character code conversion specification identifier\n * \n * * `0`: No conversion processing\n * * `1`: Treated as SJIS (CP932) and converted to UTF-8.\n * * `2`: Treated as EUC-KR (CP949) and converted to UTF-8.\n */\ntype CharacterCodeConversionType = 0 | 1 | 2;\n\nexport class PromiseAdapter {\n  state: 'pending' | 'rejected' | 'resolved';\n  result: string;\n  _promise: Promise<any>;\n\n  constructor(callback: () => Promise<any>) {\n    this.state = 'pending';\n\n    try {\n      this._promise = callback();\n    } catch (_error) {\n      this.state = 'rejected';\n    }\n\n    if (this._promise) {\n      this._promise.then(\n        this._done.bind(this),\n        this._rejected.bind(this)\n      );\n    }\n  }\n\n  _done(response: Response) {\n    if (response.ok && response.status >= 200 && response.status < 300) {\n      response.text().then(\n        (text) => {\n          this.result = text;\n          this.state = 'resolved';\n        },\n        this._rejected.bind(this)\n      );\n    } else {\n      this._rejected();\n    }\n  }\n\n  _rejected() {\n    this.state = 'rejected';\n  }\n}\n\n/**\n * Class representing the PSP Internet radio player API\n *\n * **Audio Sources:**\n * Media element source: https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode\n * Sine oscillator: https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode\n * White noise: https://noisehack.com/generate-noise-web-audio-api/#demo\n *\n * **Gain, Effects & Analysis:**\n * Gain node: https://developer.mozilla.org/en-US/docs/Web/API/GainNode\n * Analysis node: https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode\n * Filter node: https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode\n *\n * ```\n * ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐\n * │                                                 PSP Radio Player Audio Pipeline                                                 │\n * │┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┬ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ │\n * │         Audio Sources                                 Gain, Effects & Analysis                        │      Audio Sinks       ││\n * ││                             │                                                                        │                         │\n * │      ┏━━━━━━━━━━━━━━━━┓          ┌────────────────────────┐   ┌──────────────────────────────────┐    │                        ││\n * ││     ┃ Audio stream A ┃────┐ │   │      Cross-fader       │   │             Effects:             │    │                         │\n * │      ┗━━━━━━━━━━━━━━━━┛    ├────▶│ (Automatically applied │─┐ │    sysRadioSetAudioShiftWidth    │    │                        ││\n * ││     ┏━━━━━━━━━━━━━━━━┓    │ │   │ when changing streams) │ └▶│   sysRadioSetAudioCutOffWidth    │──┐ │                         │\n * │      ┃ Audio stream B ┃────┘     └────────────────────────┘   │ sysRadioSetAudioPitchShiftWidth  │  │ │                        ││\n * ││     ┗━━━━━━━━━━━━━━━━┛      │                                └──────────────────────────────────┘  │ │                         │\n * │                                ┌────────────────────────────────────────────────────────────────────┘ │                        ││\n * ││                             │ │                             ┌───────────────────────────────────┐    │                         │\n * │                                │  ┌──────────────────────┐   │      Analysis: Audio levels       │    │                        ││\n * ││                             │ │  │        Gain:         │   │  sysRadioGetRightAudioPeakLevel   │    │                         │\n * │                                └─▶│ sysRadioSetSubVolume │──▶│ sysRadioGetRightAudioAverageLevel │──┐ │                        ││\n * ││                             │    └──────────────────────┘   │   sysRadioGetLeftAudioPeakLevel   │  │ │                         │\n * │                                                              │ sysRadioGetLeftAudioAverageLevel  │  │ │                        ││\n * ││                             │                               └───────────────────────────────────┘  │ │                         │\n * │        ┏━━━━━━━━━━━━┓             ┌─────────────────────────────────────────────────┐               │ │                        ││\n * ││       ┃ Sine wave  ┃        │    │                Gain & Frequency:                │               │ │                         │\n * │        ┃ oscillator ┃────────────▶│ sysRadioSetSineWaveOscillatorFrequencyAndVolume │─┐             │ │                        ││\n * ││       ┗━━━━━━━━━━━━┛        │    └─────────────────────────────────────────────────┘ │             │ │                         │\n * │       ┏━━━━━━━━━━━━━━┓            ┌───────────────────────────────────────┐           ├─────────────┘ │                        ││\n * ││      ┃ White noise  ┃       │    │                 Gain:                 │           │               │                         │\n * │       ┃  oscillator  ┃───────────▶│ sysRadioSetWhiteNoiseOscillatorVolume │───────────┤               │                        ││\n * ││      ┗━━━━━━━━━━━━━━┛       │    └───────────────────────────────────────┘           ▼               │                         │\n * │                                                                          ┌─────────────────────────┐  │                        ││\n * ││                             │                                           │          Gain:          │  │                         │\n * │                                                                          │ sysRadioSetMasterVolume │  │                        ││\n * ││ ┏━━━━━━━━━━━━━━━━━━━━━━━━━┓ │                                           └─────────────────────────┘  │  ┏━━━━━━━━━━━━━━━━━━┓   │\n * │  ┃      Sound effect       ┃                                                          │               │  ┃                  ┃  ││\n * ││ ┃ sysRadioPlayEffectSound ┃─┼────────────────────────────────────────────────────────┴───────────────┼─▶┃   Audio output   ┃   │\n * │  ┗━━━━━━━━━━━━━━━━━━━━━━━━━┛                                                                          │  ┃                  ┃  ││\n * ││                             │                                                                        │  ┗━━━━━━━━━━━━━━━━━━┛   │\n * │ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘│\n * └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘\n * ````\n */\nexport default class PSP {\n  _strOperationString: ?string;\n  _masterPlayer: HTMLAudioElement;\n  _subPlayer: HTMLAudioElement;\n  _httpRequest: PromiseAdapter;\n  _streamMetadataUpdatedAt: number;\n  _streamMetadata: ?Element;\n  _requestBaseURL: ?string;\n\n  constructor(baseUrl: string) {\n    this._requestBaseURL = baseUrl;\n    this._masterPlayer = new Audio();\n    this._subPlayer = new Audio();\n\n    document.addEventListener('DOMContentLoaded', () => {\n      document.body && document.body.appendChild(this._masterPlayer);\n      document.body && document.body.appendChild(this._subPlayer);\n    });\n  }\n\n  _maybeUpdateMetadata() {\n    // TODO: (NOTE: This will work for Shoutcast, who knows about Icecast)\n    // 1. Fetch the `url`, check content-type\n    // 2. Detect playlist format, figure out the actual stream URL and number\n    // 3. Store the URL for fetching the statistics URL (`/statistics` relative to stream URL (see http://forums.shoutcast.com/showthread.php?t=401315))\n    // 4. Cache metadata from statistics XML\n    // 5. Whenever statistics methods (see \"Methods for getting playback quality numeric values and playback information strings\") are called, use cached metadata and enqueue a metadata update\n\n    // Don't update super often\n    if (this._streamMetadataUpdatedAt >= Date.now() - 5000) {\n      return;\n    }\n\n    this._streamMetadataUpdatedAt = Date.now();\n\n    // If the player is pointed at a downloaded playlist file\n    if (this._masterPlayer.src && this._masterPlayer.src.slice(0, 5) === 'data:') {\n      // Pull the playlist data back out of the data URI\n      const [ type, playlistBase64 ] = this._masterPlayer.src.slice(5).split(';base64,');\n      const playlistLines = atob(playlistBase64).trim().split(/\\r?\\n/g).filter((line) => line.length > 0);\n\n      let targetUrl = null;\n\n      if (type === 'audio/x-scpls') {\n        const file1Line = playlistLines.find((line) => /^file1=/i.test(line.trim()));\n        if (file1Line) {\n          targetUrl = file1Line.split('=').slice(1).join('');\n        }\n      } else if (type === 'audio/x-mpegurl') {\n        targetUrl = playlistLines.find((line) => /^[^#]/i.test(line.trim()));\n      }\n\n      if (targetUrl) {\n        let metaUrl = new URL(targetUrl);\n        let originalPathname = metaUrl.pathname;\n        metaUrl.pathname = '/statistics'\n\n        fetch(`${this._requestBaseURL}/${metaUrl.toString()}`, { mode: 'cors' }).then(\n          (response) => {\n            if (response.ok && response.status >= 200 && response.status < 300) {\n              response.text().then((text) => {\n                let xml = (new window.DOMParser()).parseFromString(text, 'application/xml');\n\n                this._streamMetadata = Array.from(xml.querySelectorAll('STREAM')).find((element) => element.querySelector('STREAMPATH').innerHTML === originalPathname) || null;\n              });\n            }\n          }\n        )\n      }\n    }\n  }\n\n  //## Methods for starting and stopping playback\n\n  /**\n   * Start playback by specifying URL of audio data stream\n   * \n   * @param url - URL of playlist\n   * @param userAgentName - User agent name used when performing HTTP GET for getting playlist information\n   * \n   * @returns\n   * * `0`: Normal\n   * * `-1`: Error\n   */\n  sysRadioPlayStream(url: string, userAgentName: string): (0 | -1) {\n    const headers = new Headers();\n    headers.append(\"User-Agent\", userAgentName);\n\n    fetch(`${this._requestBaseURL}/${url}`, { headers, mode: 'cors' })\n      .then(\n        (response) => {\n          if (response.ok && response.status >= 200 && response.status < 300) {\n            return response.text().then(\n              (text) => {\n                const playlistLines = text.trim().split(/\\r?\\n/g).filter((line) => line.length > 0);\n\n                // Playlist format detection\n                if (playlistLines[0] === '[playlist]') {\n                  this._masterPlayer.src = `data:audio/x-scpls;base64,${btoa(text)}`;\n                } else if (playlistLines[0] === '#EXTM3U') {\n                  this._masterPlayer.src = `data:audio/x-mpegurl;base64,${btoa(text)}`;\n                } else {\n                  this._masterPlayer.src = url;\n                }\n\n                return this._masterPlayer.play().then(\n                  (played) => {\n                    console.log(\"Playback started OK!\", played);\n\n                    // This triggers a refresh of the metadata cache\n                    this.sysRadioGetContentMetaInfo(0);\n                  },\n                  (error) => {\n                    console.error(`Failed to start playback: ${error.toString()}`);\n                    debugger;\n                  }\n                );\n              }\n            );\n          }\n\n          return Promise.reject();\n      })\n      .catch(\n        () => {\n          this._masterPlayer.src = url;\n          return this._masterPlayer.play().then(\n            (played) => {\n              console.log(\"Playback started OK!\", played);\n\n              // This triggers a refresh of the metadata cache\n              this.sysRadioGetContentMetaInfo(0);\n            },\n            (error) => {\n              console.error(`Failed to start fallback playback: ${error.toString()}`);\n              debugger;\n            }\n          );\n        }\n      );\n\n    return 0;\n  }\n\n  /**\n   * Start playback by specifying URL of PLS file\n   * \n   * @param url - URL of playlist\n   * @param userAgentName0 - User agent name used when performing HTTP GET for getting playlist information\n   * @param userAgentName1 - User agent name used when connecting to broadcast server\n   * \n   * @returns\n   * * `0`: Normal\n   * * `-1`: Error\n   */\n  sysRadioPlayPls(url: string, userAgentName0: string, userAgentName1: string): (0 | -1) {\n    return this.sysRadioPlayStream(url, userAgentName0);\n  }\n\n  /**\n   * Start playback by specifying URL of M3U file\n   * \n   * @param url - URL of playlist\n   * @param userAgentName0 - User agent name used when performing HTTP GET for getting M3U file\n   * @param userAgentName1 - User agent name used when connecting to broadcast server\n   * \n   * @returns\n   * * `0`: Normal\n   * * `-1`: Error\n   */\n  sysRadioPlayM3u(url: string, userAgentName0: string, userAgentName1: string): (0 | -1) {\n    return this.sysRadioPlayStream(url, userAgentName0);\n  }\n\n  /**\n   * Stop playback\n   * \n   * @param [mode] - Identifier of audio data stream to be stopped:\n   * * `0`: Main audio data stream\n   * * `1`: Sub audio data stream\n   */\n  sysRadioStop(mode?: 0 | 1): 0 {\n    switch (mode) {\n      case 1:\n        this._subPlayer.pause();\n        this._subPlayer.src = '';\n        break;\n    \n      case 0:\n      default:\n        this._masterPlayer.pause();\n        this._masterPlayer.src = '';\n        break;\n    }\n\n    return 0;\n  }\n  \n  // ## Methods for controlling output volume\n  \n  /**\n   * Set master volume level\n   * \n   * @param vol - Volume value (0 ≦ `vol` ≦ 255)\n   */\n  sysRadioSetMasterVolume(vol: number): 0 {\n    return 0;\n  }\n\n  /**\n   * Set sub volume level\n   * \n   * @param vol - Volume value (0 ≦ `vol` ≦ 255)\n   */\n  sysRadioSetSubVolume(vol: number): 0 {\n    return 0;\n  }\n\n  // ## Methods for getting audio output level\n\n  /**\n   * Get peak audio level being output from audio left channel.  \n   * Used for displaying audio level meter, etc.\n   * \n   * @param [mode] - Identifier for specifying the range of the return value (see below)\n   * @returns\n   * * **When mode is not specified or when 0 is specified for mode**: Integer value in the range 0 ≦ `result` ≦ 255 \n   * * **When 1 is specified for mode**: Integer value in the range 0 ≦ `result` ≦ 32767\n   * * **When 2 is specified for mode**: Integer value in the range 0 ≦ `result` ≦ 90\n   */\n  sysRadioGetLeftAudioPeakLevel(mode?: (0 | 1 | 2)): number {\n    return 0;\n  }\n\n  /**\n   * Get peak audio level being output from audio right channel.  \n   * Used for displaying audio level meter, etc.\n   * \n   * @param [mode] - Identifier for specifying the range of the return value (see below)\n   * @returns\n   * * **When mode is not specified or when 0 is specified for mode**: Integer value in the range 0 ≦ `result` ≦ 255 \n   * * **When 1 is specified for mode**: Integer value in the range 0 ≦ `result` ≦ 32767\n   * * **When 2 is specified for mode**: Integer value in the range 0 ≦ `result` ≦ 90\n   */\n  sysRadioGetRightAudioPeakLevel(mode?: (0 | 1 | 2)): number {\n    return 0;\n  }\n\n  /**\n   * Get average audio level being output from audio left channel.  \n   * Used for displaying audio level meter, etc.\n   * \n   * @param [mode] - Identifier for specifying the range of the return value (see below)\n   * @returns\n   * * **When mode is not specified or when 0 is specified for mode**: Integer value in the range 0 ≦ `result` ≦ 255 \n   * * **When 1 is specified for mode**: Integer value in the range 0 ≦ `result` ≦ 32767\n   * * **When 2 is specified for mode**: Integer value in the range 0 ≦ `result` ≦ 90\n   */\n  sysRadioGetLeftAudioAverageLevel(mode?: (0 | 1 | 2)): number {\n    return 0;\n  }\n\n  /**\n   * Get average audio level being output from audio right channel.  \n   * Used for displaying audio level meter, etc.\n   * \n   * @param [mode] - Identifier for specifying the range of the return value (see below)\n   * @returns\n   * * **When mode is not specified or when 0 is specified for mode**: Integer value in the range 0 ≦ `result` ≦ 255 \n   * * **When 1 is specified for mode**: Integer value in the range 0 ≦ `result` ≦ 32767\n   * * **When 2 is specified for mode**: Integer value in the range 0 ≦ `result` ≦ 90\n   */\n  sysRadioGetRightAudioAverageLevel(mode?: (0 | 1 | 2)): number {\n    return 0;\n  }\n\n  // ## Methods for controlling sound effects\n\n  /**\n   * Set oscillation frequency and volume level of sine wave oscillator\n   * \n   * @param freq - Oscillation frequency (0 ≦ `freq` ≦ 22500; units: Hz)\n   * @param [vol] - Volume (0 ≦ `vol` ≦ 255)\n   * @param [tension] - Rate of frequency change (0 ≦ `tension` ≦ 255)\n   * @param [cwtext] - Morse code text\n   * @param [keyingspeed] - Morse code keying speed (0 ≦ `keyingspeed` ≦ 32)\n   */\n  sysRadioSetSineWaveOscillatorFrequencyAndVolume(freq: number, vol?: number, tension?: number, cwtext?: string, keyingspeed?: number): 0 {\n    return 0;\n  }\n\n  /**\n   * Set volume level of pseudo white noise oscillator\n   * \n   * @param vol - Volume (0 ≦ `vol` ≦ 255)\n   * @param [lowF] - Lower limit of generated frequencies (0 ≦ `lowF` ≦ 255) \n   * @param [highF] - Upper limit of generated frequencies (0 ≦ `highF` ≦ 255, where `lowF` ≦ `highF`)\n   * @param [tension] - Rate of frequency change (0 ≦ `tension` ≦ 255)\n   */\n  sysRadioSetWhiteNoiseOscillatorVolume(vol: number, lowF?: number, highF?: number, tension?: number): 0 {\n    return 0;\n  }\n\n  /**\n   * Set shift width of audio frequency component\n   * \n   * @param val - Shift width (-256 ≦ `val` ≦ 256)  \n   *              Note: The meaning of this numeric value is an internally defined independent entity. The units of this value are not Hz.\n   */\n  sysRadioSetAudioShiftWidth(val: number): 0 {\n    return 0;\n  }\n\n  /**\n   * Set cut-off width of audio frequency component\n   * \n   * @param val - Cut-off width (-256 ≦ `val` ≦ 256)  \n   *              Note: The meaning of this numeric value is an internally defined independent entity. The units of this value are not Hz.\n   */\n  sysRadioSetAudioCutOffWidth(val: number): 0 {\n    return 0;\n  }\n\n  /**\n   * Set pitch shift width of audio frequency component\n   * \n   * @param val - Pitch shift width (-256 ≦ `val` ≦ 256)  \n   *              Note: The meaning of this numeric value is an internally defined independent entity. The units of this value are not Hz.\n   */\n  sysRadioSetAudioPitchShiftWidth(val: number): 0 {\n    return 0;\n  }\n\n  /**\n   * Play sound effect\n   * \n   * This extended method plays a clicking sound (like a shutter sound).\n   */\n  sysRadioPlayEffectSound(): 0 {\n    return 0;\n  }\n\n  // ## Methods related to \"HTTP GET\" processing\n\n  /**\n   * Prepare to perform HTTP GET for specified URL\n   * \n   * @param url - Target URL\n   * @param userAgentName - User agent name\n   * @param length - Maximum size\n   * @param charCodeConvertOption - Character code conversion specification identifier\n   * \n   * @returns\n   * * `0`: Normal\n   * * `-1`: Error\n   */\n  sysRadioPrepareForHttpGet(\n    url: string,\n    userAgentName: string = \"Mozilla/4.0 (PSP (PlayStation Portable); 2.00)\",\n    length: number = 49152,\n    charCodeConvertOption: CharacterCodeConversionType\n  ): 0 | -1 {\n    const headers = new Headers();\n    headers.append(\"User-Agent\", userAgentName);\n    this._httpRequest = new PromiseAdapter(() => fetch(`${this._requestBaseURL}/${url}`, { headers, mode: 'cors' }));\n    return 0;\n  }\n\n  /**\n   * Report status of sysRadioPrepareForHttpGet processing\n   * \n   * @returns\n   * * `0`: HTTP GET processing is completed.\n   * * `1`: HTTP GET processing is in progress.\n   * * `-1`: HTTP GET processing failed.\n   */\n  sysRadioGetHttpGetStatus(): 0 | 1 | -1 {\n    if (this._httpRequest) {\n      return {\n        'resolved': 0,\n        'pending': 1,\n        'rejected': -1\n      }[this._httpRequest.state];\n    }\n\n    return -1;\n  }\n\n  /**\n   * Return sysRadioPrepareForHttpGet processing result as string\n   * \n   * @returns The HTTP GET processing result.\n   */\n  sysRadioGetHttpGetResult(): string {\n    if (this._httpRequest) {\n      return this._httpRequest.result;\n    }\n\n    return '';\n  }\n\n  /**\n   * Perform sysRadioPrepareForHttpGet housekeeping\n   */\n  sysRadioHttpGetTerminate() {\n    delete this._httpRequest;\n  }\n\n  // ## Method for getting internal status\n\n  /**\n   * Get internal status of player system\n   * \n   * @returns\n   * * `0`: No processing is being performed.\n   * * `1`: Audio data stream is being played.\n   * * `2`: PLS or M3U data is being obtained.\n   * * `3`: PLS or M3U data is being parsed.\n   * * `4`: Connecting to the broadcast server.\n   * * `-1`: Some kind of error occurred.\n   */\n  sysRadioGetPlayerStatus(): 0 | 1 | 2 | 3 | 4 | -1 {\n    if (!this._masterPlayer || this._masterPlayer.error !== null) {\n      return -1;\n    }\n\n    if (this._masterPlayer.paused) {\n      return 0;\n    }\n\n    // Roughly map the `readyState` to the PSP's playback states\n    switch (this._masterPlayer.readyState) {\n      case 1: // Enough of the media resource has been retrieved that the metadata attributes are initialized. Seeking will no longer raise an exception.\n        return 2;\n\n      case 2: // Data is available for the current playback position, but not enough to actually play more than one frame.\n        return 4;\n\n      case 3: // Data for the current playback position as well as for at least a little bit of time into the future is available (in other words, at least two frames of video, for example).\n        return 3;\n\n      case 4: // Enough data is available—and the download rate is high enough—that the media can be played through to the end without interruption.\n        return 1;\n\n      case 0: // No information is available about the media resource.\n      default:\n        return -1\n    }\n  }\n\n  // ## Methods for getting playback quality numeric values and playback information strings\n\n  /**\n   * Get communication circuit band quality evaluation value\n   * \n   * @returns An integer value in the range 0 ≦ `result` ≦ 255.\n   */\n  sysRadioGetNetworkBandQuality(): number {\n    return 255;\n  }\n\n  /**\n   * Get audio distortion rate (upper and lower limit saturation frequency of sound)\n   * \n   * @returns An integer value in the range 0 ≦ `result` ≦ 255.\n   */\n  sysRadioGetAudioSoundDistortionRate(): number {\n    return 0;\n  }\n\n  /**\n   * Get content meta information related to audio data stream being played\n   * \n   * @returns A content meta information string is returned.\n   */\n  sysRadioGetContentMetaInfo(charCodeConvertOption: CharacterCodeConversionType): string {\n    this._maybeUpdateMetadata();\n\n    if (this._streamMetadata) {\n      const titleElement = this._streamMetadata.querySelector('SONGTITLE');\n\n      if (titleElement) {\n        return titleElement.innerHTML;\n      }\n    }\n\n    return '';\n  }\n\n  /**\n   * Get bit rate of audio data stream being played\n   * \n   * @returns An integer value in the range 0 ≦ `result` ≦ 320,000.  \n   *          If the Internet radio player is not connected, 0 is returned.\n   */\n  sysRadioGetBitRate(): number {\n    this._maybeUpdateMetadata();\n\n    if (this._streamMetadata) {\n      const bitrateElement = this._streamMetadata.querySelector('BITRATE');\n\n      if (bitrateElement) {\n        return parseInt(bitrateElement.innerHTML) * 1000;\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Get sampling rate value of audio data stream being played\n   * \n   * @returns An integer value in the range 0 ≦ `result` ≦ 48,000.  \n   *          If the Internet radio player is not connected, 0 is returned.\n   */\n  sysRadioGetSamplingRate(): number {\n    this._maybeUpdateMetadata();\n\n    if (this._streamMetadata) {\n      const samplerateElement = this._streamMetadata.querySelector('SAMPLERATE');\n\n      if (samplerateElement) {\n        return parseInt(samplerateElement.innerHTML);\n      }\n    }\n\n    return 0;\n  }\n\n  // ## Methods for getting information related to audio data stream being played\n\n  /**\n   * Get URL of audio data stream being played\n   * \n   * @returns The URL string of the broadcast server is returned.  \n   *          If the Internet radio player is not connected, a string with length 0 is returned.\n   */\n  sysRadioGetStreamUrl(): string {\n    return '';\n  }\n\n  /**\n   * Get title information of audio data stream being played\n   * \n   * @returns The stream title information string is returned.  \n   *          If the Internet radio player is not connected, a string with length 0 is returned.\n   */\n  sysRadioGetStreamTitle(/*contentMetaInfoEncodeType: CharacterCodeConversionType*/): string {\n    this._maybeUpdateMetadata();\n\n    if (this._streamMetadata) {\n      const serverTitleElement = this._streamMetadata.querySelector('SERVERTITLE');\n\n      if (serverTitleElement) {\n        return serverTitleElement.innerHTML;\n      }\n    }\n\n    return '';\n  }\n\n  /**\n   * Get related Web page URL string of audio data stream being played\n   * \n   * @returns The related page's URL string is returned.  \n   *          If the Internet radio player is not connected, a string with length 0 is returned.\n   */\n  sysRadioGetRelatedPageUrl(): string {\n    this._maybeUpdateMetadata();\n\n    if (this._streamMetadata) {\n      const serverUrlElement = this._streamMetadata.querySelector('SERVERURL');\n\n      if (serverUrlElement) {\n        return serverUrlElement.innerHTML;\n      }\n    }\n\n    return '';\n  }\n\n  /**\n   * Get IP address of broadcast server of audio data stream being played\n   * \n   * @returns The IP address string of the broadcast server from which the audio data stream is being received (to which the Internet radio player is connected) is returned.  \n   *          If the Internet radio player is not connected, a string with length 0 is returned.\n   */\n  sysRadioGetStreamIpAddress(): string {\n    return '';\n  }\n\n  /**\n   * Get connection port number of broadcast server of audio data stream being played\n   * \n   * @returns The port number (integer value) is returned.  \n   *          If the Internet radio player is not connected, 0 is returned.\n   */\n  sysRadioGetStreamPort(): number {\n    return 0;\n  }\n\n  /**\n   * Get level indicating residual amount of audio data stream buffer being played\n   * \n   * @returns An integer value in the range 0 ≦ `result` ≦ 255 is returned.\n   */\n  sysRadioGetStreamBufferLevel(): number {\n    return 255;\n  }\n\n  // ## Methods for finding files on the Memory Stick Duo™\n\n  /**\n   * Prepare for directory entry scan on the Memory Stick Duo™\n   * \n   * @param [path] - Pathname  \n   *                 If this is omitted, the root directory \"/\" is assumed to be specified.\n   * \n   * @returns\n   * * `0`: Normal termination\n   * * `-1`: Error (the directory specified in the argument does not exist, etc.)\n   */\n  sysRadioPrepareForScanDir(path: string = '/'): 0 | -1 {\n    return -1;\n  }\n\n  /**\n   * Scan directory and return file entry (filename) that was found first.  \n   * For the second and subsequent calls, return the file entry (filename) that was found next.\n   * \n   * @returns A file entry (filename) string.  \n   *          If the length of the returned string is 0, it means that the scan finished or that an error occurred.\n   */\n  sysRadioScanDir(): string {\n    return '';\n  }\n\n  /**\n   * Detect whether a Memory Stick Duo™ was inserted or removed following previous {@link sysRadioPrepareForScanDir}\n   * \n   * @returns\n   * * `0`: Memory Stick Duo™ has not been inserted or removed.\n   * * `1`: Memory Stick Duo™ was removed.\n   * * `2`: Memory Stick Duo™ was reinserted.\n   */\n  sysRadioGetMediaInOutStatus(): 0 | 1 | 2 {\n    return 0;\n  }\n\n  // ## String search processing methods\n\n  /**\n   * Prepare for string search or string extraction processing\n   * \n   * @param str - String to be processed\n   */\n  sysRadioPrepareForStrOperation(str: string): 0 {\n    this._strOperationString = str;\n    return 0;\n  }\n\n  /**\n   * Nearly equivalent to JavaScript standard method \"length.\"  \n   * Returns string length as value in terms of bytes.\n   * \n   * @returns The string length (in bytes).\n   */\n  sysRadioStrLength(): number {\n    return this._strOperationString\n      ? this._strOperationString.length\n      : 0;\n  }\n\n  /**\n   * Nearly equivalent to JavaScript standard method \"indexOf.\"  \n   * Searches for string pattern.\n   * \n   * @param pattern - Search keyword string\n   * @param startPos - Search starting position (units: bytes)\n   * \n   * @returns The detected position (units: bytes).\n   */\n  sysRadioStrIndexOf(pattern: string, startPos: number): number {\n    // TODO: the SCEI implementation appears to have a bug\n    //       where it returns the *second* index\n    return this._strOperationString\n      ? this._strOperationString.indexOf(pattern, startPos)\n      : -1;\n  }\n\n  /**\n   * Nearly equivalent to JavaScript standard method \"slice.\"  \n   * Extracts substring.\n   * \n   * @param startPos - Extraction starting position (bytes)\n   * @param endPos - Extraction ending position (bytes)\n   * \n   * @returns The extracted string.\n   */\n  sysRadioStrSlice(startPos: number, endPos: number): string {\n    return this._strOperationString\n      ? this._strOperationString.slice(startPos, endPos)\n      : '';\n  }\n\n  /**\n   * Nearly equivalent to JavaScript standard method \"charCodeAt.\"  \n   * Returns character code of specific position in string.\n   * \n   * @param pos - Character code acquisition position (in bytes)\n   * \n   * @returns Character code.\n   */\n  sysRadioStrCharCodeAt(pos: number): number {\n    return this._strOperationString\n      ? this._strOperationString.charCodeAt(pos)\n      : -1;\n  }\n\n  /**\n   * Terminate string search processing.\n   */\n  sysRadioStrOperationTerminate(): 0 {\n    delete this._strOperationString;\n    return 0;\n  }\n  \n  // ## String conversion processing methods\n\n  /**\n   * Convert characters that contain a character entity name to an actual character\n   * \n   * @param str - String to be processed\n   * \n   * @returns The converted string.\n   */\n  sysRadioCharacterEntityConvert(str: string): string {\n    return require(\"entities\").decodeHTML(str);\n  }\n\n  /**\n   * Convert UTF-8 string to SJIS or EUC-KR string.\n   * \n   * @param charCodeConvertOption - Identifier for specifying character code conversion\n   * * `1`: Convert string specified by str to SJIS (CP932).\n   * * `2`: Convert string specified by str to EUC-KR (CP949).\n   * @param str - UTF-8 string to be converted\n   * \n   * @returns Converted string. **Note** that this implementation simply returns the string unaltered, expecting modern web browser implementations to handle the UTF-8 string.\n   */\n  sysRadioCharacterCodeConvert(charCodeConvertOption: CharacterCodeConversionType, str: string): string {\n    return str;\n  }\n\n  // ## Methods for getting analog pad values\n\n  /**\n   * Get analog stick's X value\n   * \n   * @returns An integer value in the range -128 ≦ `result` ≦ 127.\n   */\n  sysRadioGetAnalogStickXValue(): number {\n    return 0;\n  }\n\n  /**\n   * Get analog stick's Y value\n   * \n   * @returns An integer value in the range -128 ≦ `result` ≦ 127.\n   */\n  sysRadioGetAnalogStickYValue() {\n    return 0;\n  }\n\n  /**\n   * Get analog stick's angle value\n   * \n   * @returns An integer value in the range -2048π ≦ `result` ≦ 2048π.\n   */\n  sysRadioGetAnalogStickAngleValue() {\n    return 0;\n  }\n\n  /**\n   * Get analog stick's radius value\n   * \n   * @returns An integer value in the range 0 ≦ `result` ≦ √(128^2 + 128^2).  \n   *          However, result=√(128^2 + 128^2) is not valid for the PSP™ system.\n   */\n  sysRadioGetAnalogStickRadiusValue(): number {\n    return 0;\n  }\n\n  // ## Methods related to debug log console\n\n  /**\n   * Set debug mode\n   * \n   * @param flag - Debug mode setting.\n   * * `0`: Debug mode OFF.\n   * * `1`: Debug mode ON.\n   */\n  sysRadioSetDebugMode(flag: 0 | 1): 0 {\n    return 0;\n  }\n\n  /**\n   * Display string on debug log console\n   * \n   * @param str - String to be displayed\n   */\n  sysRadioDebugLog(str: string): 0 {\n    console.debug(`[sysRadioDebugLog]: ${str}`);\n    return 0;\n  }\n\n  /**\n   * Set debug log console's text style (typeface, character color, background color, existence of shadow, character align attribute)\n   * \n   * @param colorF0r - R value of character color 0\n   * @param colorF0g - G value of character color 0\n   * @param colorF0b - B value of character color 0\n   * @param colorF0a - A value of character color 0\n   * @param [colorF1r] - R value of character color 1\n   * @param [colorF1g] - G value of character color 1\n   * @param [colorF1b] - B value of character color 1\n   * @param [colorF1a] - A value of character color 1\n   * @param [colorBr] - R value of character background color 1\n   * @param [colorBg] - G value of character background color 1\n   * @param [colorBb] - B value of character background color 1\n   * @param [colorBa] - A value of character background color 1  \n   *                    The above are all integer values in the range 0 ≦ `color` ≦ 255.\n   * @param [slyle] - Character style specification.\n   * * `0`: Regular character.\n   * * `1`: Bold character (however, only letters and numbers).\n   * @param [align] - Alignment specification.\n   * * `0`: Left justified\n   * * `1`: Centered\n   * * `2`: Right justified\n   */\n  sysRadioSetDebugLogTextStyle(\n    colorF0r: number,\n    colorF0g: number,\n    colorF0b: number,\n    colorF0a: number,\n    colorF1r: number,\n    colorF1g: number,\n    colorF1b: number,\n    colorF1a: number,\n    colorBr: number,\n    colorBg: number,\n    colorBb:\n    number,\n    colorBa: number,\n    slyle: 0 | 1,\n    align: 0 | 1 | 2\n  ): 0 {\n    return 0;\n  }\n\n  /**\n   * Clear strings displayed on debug log console\n   */\n  sysRadioClearDebugLog(): 0 {\n    return 0;\n  }\n\n  // ## Miscellaneous\n\n  /**\n   * Get Internet radio player system core version information\n   * \n   * @returns The PSP™ Internet radio player system core version information string is returned.\n   */\n  sysRadioGetPlayerCoreVersionInfo(): string {\n    return 'PSP-2000:RadioPlayerCore_5.0.0';\n  }\n\n  /**\n   * Get support information related to a specific function\n   * \n   * @param id - Inquiry item ID\n   * * `0`: Can AAC+ stream be played?\n   * * `1`: Can the {@link sysRadioSleep} method be used?\n   * * `2`: Can the {@link sysRadioGetLeftAudioAverageLevel} and {@link sysRadioGetRightAudioAverageLevel} methods be used?\n   * * `3`: Can the {@link sysRadioStrCharCodeAt} method be used?\n   * * `4`: Can the {@link sysRadioCharacterCodeConvert} method be used?\n   * * `5`: Can the {@link sysRadioGetSystemStatus} method be used?\n   */\n  sysRadioCapabilityCheck(id: number): PSPBoolean {\n    console.debug(`sysRadioCapabilityCheck: radio player capability ${id} requested`);\n    switch (id) {\n      case 0:\n        return (\n          new Audio().canPlayType(\"audio/aacp\") !== ''\n          ? 1\n          : 0\n        );\n\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Get PSP™ system's START button toggle status\n   * \n   * On a real PSP™ system, pressing the START button toggles this value.\n   * It is `1` by default, and when you press the START button it is toggled between that and `0`.\n   * Some radio players use this to toggle their mute function.\n   * \n   * @returns\n   * * `1`: Returned when the START button has not been toggled.\n   * * `0`: Returned when the START button has been toggled.\n   */\n  sysRadioGetStartButtonToggleStatus(): PSPBoolean {\n    console.debug(`sysRadioGetStartButtonToggleStatus: START button toggle state requested`);\n    return 1;\n  }\n\n  /**\n   * Control backlight's always on state when powered by external power supply\n   * \n   * @param flag - When 1 is specified, the Internet radio player is in a state in which the backlight is always on, and when 0 is specified, this state is canceled.\n   */\n  sysRadioBackLightAlwaysOn(flag: PSPBoolean): 0 {\n    if (flag == 1) {\n      console.debug(`sysRadioBackLightAlwaysOn: backlight lock requested`);\n    } else if (flag == 0) {\n      console.debug(`sysRadioBackLightAlwaysOn: backlight lock cleared`);\n    } else {\n      console.debug(`sysRadioBackLightAlwaysOn: invalid state specified: ${flag}`);\n    }\n\n    return 0;\n  }\n\n  /**\n   * Control busy indicator display at bottom left of screen\n   * \n   * @param flag - If 1 is specified, the busy indicator appears, and if 0 is specified, it is hidden.\n   */\n  sysRadioBusyIndicator(flag: PSPBoolean): 0 {\n    if (flag == 1) {\n      console.debug(`sysRadioBusyIndicator: busy indicator requested`);\n    } else if (flag == 0) {\n      console.debug(`sysRadioBusyIndicator: busy indicator cleared`);\n    } else {\n      console.debug(`sysRadioBusyIndicator: invalid state specified: ${flag}`);\n    }\n\n    return 0;\n  }\n\n  /**\n   * Capture screenshot\n   * \n   * @returns\n   * * `0`: Processing was successful\n   * * `-1`: Error\n   */\n  sysRadioCaptureScreenShot(): 0 | -1 {\n    console.debug(`sysRadioCaptureScreenShot: screenshot requested`);\n    return -1;\n  }\n\n  /**\n   * Set PSP™ system sleep mode\n   */\n  sysRadioSleep(): 0 {\n    console.debug(`sysRadioSleep: sleep mode requested`);\n    return 0;\n  }\n\n  /**\n   * Inquire about internal status of PSP™ system.\n   * \n   * @param id - Inquiry item ID\n   * * `0`: Was sleep mode canceled after sleep mode was entered?\n   */\n  sysRadioGetSystemStatus(id: number): PSPBoolean {\n    switch (id) {\n      case 0:\n        console.debug(`sysRadioGetSystemStatus(1): previous sleep mode state queried`);\n        return 1;\n\n      default:\n        console.debug(`sysRadioGetSystemStatus(${id}): unknown system status queried`);\n        return 0;\n    }\n  }\n}\n","// @flow\n\nimport PSP from 'psp-radio-api'\n\n// $FlowFixMe: This is required to make SCEI's code try to load the Radio plugin\nnavigator.mimeTypes[\"application/x-psp-extplugin\"] = { enabledPlugin: true };\n\n// Shim to force all elements with `id`s to also have that name, if no `name` is set.\n// \n// It looks like NetFront implements the \"named items\" API\n// (Spec: https://html.spec.whatwg.org/multipage/dom.html#dom-document-namedItem-which,\n// where an element with a `name` is a property of the `document` object with that name)\n// but with `id` properties also counting where no `name` is set.\n// Very mid-1990s of them!\ndocument.addEventListener('DOMContentLoaded',\n  () => Array.from(document.querySelectorAll('[id]:not([name])')).forEach(\n    (element) => element.setAttribute('name', element.id)\n  )\n);\n\nwindow.psp = new PSP('https://cors-anywhere.herokuapp.com');\n"]}