{"version":3,"sources":["app-worker.js"],"names":["self","addEventListener","event","console","log","waitUntil","skipWaiting"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,IAAI,CAACC,gBAAL,CAAsB,SAAtB,EAAiC,UAACC,KAAD,EAAW;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAF,EAAAA,KAAK,CAACG,SAAN,CAAgBL,IAAI,CAACM,WAAL,EAAhB;AACD,CAHD;AAKAN,IAAI,CAACC,gBAAL,CAAsB,UAAtB,EAAkC,UAACC,KAAD;AAAA,SAAWC,OAAO,CAACC,GAAR,CAAY,2BAAZ,CAAX;AAAA,CAAlC,GAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app-worker.map","sourceRoot":"../src","sourcesContent":["self.addEventListener('install', (event) => {\n  console.log('👩🏻‍🔧 Worker Installed!');\n  event.waitUntil(self.skipWaiting());\n});\n\nself.addEventListener('activate', (event) => console.log('👩🏻‍🏭 Worker Activated!'));\n\n// client-side proxying seems to break media streaming??? wtf\n\n// self.addEventListener('fetch', (event) => {\n//   let eventUrl = new URL(event.request.url);\n\n//   if (eventUrl.pathname.startsWith('/players') && eventUrl.pathname.endsWith('.html')) {\n//     console.log(`🕵🏻‍♀️ Proxing resource \"${eventUrl}\"`);\n\n//     event.respondWith(fetch(event.request).then((response) => {\n//       const contentType = response.headers.get('Content-Type')\n//       if (contentType.split(';')[0] === 'text/html') {\n//         return response.text().then((text) => {\n//           let scriptInsertionPoint = text.indexOf('<script');\n\n//           if (scriptInsertionPoint < 0) {\n//             scriptInsertionPoint = text.indexOf('</head');\n//           }\n\n//           const alteredText = `${text.slice(0, scriptInsertionPoint)}\n//             <link rel=\"stylesheet\" href=\"https://use.typekit.net/ibi4odc.css\">\n//             <style>html,html *{font-family:eurostile,sans-serif;}</style>\n//             <script src=\"../../scripts/psp-radio-shim.js\"></script>\n//             ${text.slice(scriptInsertionPoint)}`;\n\n//           return Promise.resolve(new Response(alteredText, { headers: { 'Content-Type': contentType } }));\n//         });\n//       }\n\n//       return Promise.resolve(response);\n//     }));\n//   } else {\n//     console.log(`🙈 Skipping proxy for resource \"${eventUrl}\"`);\n//     event.respondWith(fetch(event.request));\n//   }\n// });\n"]}